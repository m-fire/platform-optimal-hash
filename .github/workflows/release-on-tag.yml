# .github/workflows/release-on-tag.yml
# 'v*' 태그 푸시 시 트리거되어 KMP 라이브러리를 빌드하고 GitHub 릴리즈를 생성함.
# create_release Job에서 Composite Action을 활용하도록 개선됨.
name: Release KMP Native Libraries on Tag Push

on:
  push:
    tags:
      - 'v*' # 'v'로 시작하는 태그가 푸시될 때 실행

jobs:
  # =============================================================================
  # Job 1: Linux, Windows, Android 타겟 빌드
  # =============================================================================
  build_linux_windows_android:
    name: Build Linux + Windows + Android
    runs-on: ubuntu-latest
    steps:
      # 1.1. 태그된 코드 체크아웃
      - name: Checkout tagged code
        uses: actions/checkout@v4

      # 1.2. 환경 설정
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          java-version: '17'

      # 1.3. Gradle 'assemble' 실행
      - name: Build All Targets (Assemble)
        run: ./gradlew assemble --build-cache

      # 1.4. 빌드 결과물 아티팩트로 업로드 (릴리즈 Job에서 사용)
      - name: Upload Linux/Windows/Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: non-apple-binaries
          # 실제 프로젝트 경로에 맞게 수정 필요
          path: |
            library/build/bin/linuxX64/releaseShared/
            library/build/bin/windowsX64/releaseShared/
            library/build/bin/androidNativeArm64/releaseShared/
            library/build/bin/androidNativeX64/releaseShared/
          retention-days: 1

  # =============================================================================
  # Job 2: Apple (macOS, iOS) 타겟 빌드
  # =============================================================================
  build_apple:
    name: Build macOS + iOS
    runs-on: macos-latest
    steps:
      # 2.1. 태그된 코드 체크아웃
      - name: Checkout tagged code
        uses: actions/checkout@v4

      # 2.2. 환경 설정 (Composite Action 사용, Xcode 활성화)
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          java-version: '17'
          setup-xcode: 'true'

      # 2.3. Gradle 'assemble' 실행
      - name: Build All Targets (Assemble)
        run: ./gradlew assemble --build-cache

      # 2.4. 빌드 결과물 아티팩트로 업로드 (릴리즈 Job에서 사용)
      - name: Upload Apple Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apple-binaries
          # 실제 프로젝트 경로에 맞게 수정 필요
          path: |
            library/build/bin/macosArm64/releaseShared/
            library/build/bin/macosX64/releaseShared/
            library/build/bin/iosArm64/releaseShared/
            library/build/bin/iosX64/releaseShared/
          retention-days: 1

  # =============================================================================
  # Job 3: 릴리즈 생성 및 패키징
  # =============================================================================
  create_release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build_linux_windows_android, build_apple] # 모든 빌드 완료 후 실행
    permissions:
      contents: write # 릴리즈 생성 및 에셋 업로드 권한

    steps:
      # 3.1. 태그된 코드 체크아웃 (gradle.properties 등 참조 위해)
      - name: Checkout tagged code
        uses: actions/checkout@v4

      # 3.2. 릴리즈 준비 (Composite Action 사용)
      # 이 액션은 내부적으로 아티팩트 다운로드, 에셋 준비, 정보 생성을 수행함.
      - name: Prepare Release Assets and Info
        id: prepare # 출력 참조를 위한 ID
        uses: ./.github/actions/prepare-release
        with:
          # 태그 이름에서 'v' 제거하여 버전 번호 전달
          version: ${{ github.ref_name }} # 태그 이름 자체를 전달하거나, 스크립트처럼 'v' 제거 로직 추가 가능
          # 필요 시 다른 input 전달 (python-version 등)
          # python-version: '3.10'
          # artifact-download-path: 'downloaded-artifacts' # 기본값 사용 시 생략 가능
          # prepared-assets-path: 'release-assets' # 기본값 사용 시 생략 가능
          # output-body-file: 'release-body.md' # 기본값 사용 시 생략 가능
          # output-zip-file-pattern: 'platform-binaries-{version}.zip' # 기본값 사용 시 생략 가능

      # 3.3. GitHub 릴리즈 생성 및 모든 에셋 업로드 (softprops/action-gh-release 사용)
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }} # 트리거된 태그 사용
          name: Release ${{ github.ref_name }} # 릴리즈 제목 (예: Release v1.0.0)
          body_path: ${{ steps.prepare.outputs.body_path }} # 복합 액션의 출력 사용
          draft: false # 정식 릴리즈로 생성 (필요 시 true)
          prerelease: false # 프리릴리즈 아님 (필요 시 true)
          files: |
            ${{ steps.prepare.outputs.zip_path }} # 복합 액션의 출력 사용 (Zip 아카이브)
            release-assets/**/* # 복합 액션이 준비한 개별 플랫폼 에셋 경로 (기본값 가정)
          fail_on_unmatched_files: true # 파일 경로 못 찾으면 실패 처리
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 액션 내에서 사용할 토큰

  # =============================================================================
  # Job 5: Maven Central 배포 (선택 사항)
  # =============================================================================
#  publish_maven:
#    name: Publish to Maven Central
#    if: ${{ github.event.inputs.publishToMavenCentral == true }}
#    runs-on: ubuntu-latest
#    needs: [validate, create_release] # 릴리즈 생성 완료 후
#
#    steps:
#      # 5.1. 코드 체크아웃
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # 5.2. 환경 설정 (Composite Action 사용)
#      - name: Setup Environment
#        uses: ./.github/actions/setup-environment
#        with:
#          java-version: '17'
#
#      # 5.3. 라이브러리 퍼블리시 (Composite Action 사용)
#      - name: Publish Library
#        uses: ./.github/actions/publish-library
#        with:
#          # 그룹 ID는 프로젝트에 맞게 설정
#          sonatype-profile: io.stormi.support.platform.collection.hash
#        secrets:
#          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
