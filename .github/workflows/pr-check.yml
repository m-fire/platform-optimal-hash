# PR 검사 및 태그 기반 릴리스
name: PR Check & Release on Tag

# 워크플로우 트리거 조건
on:
  # 1. Pull Request: main 브랜치 대상 PR 발생 시
  pull_request:
    branches: [ main ]
    paths: # 특정 경로 변경 시에만 트리거
      - '.github/**' # 워크플로우 또는 스크립트 변경
      - 'library/**' # 라이브러리 소스 코드 변경
      - 'gradle/**' # Gradle 래퍼 또는 의존성 관련 파일 변경
      - 'gradle.properties' # 프로젝트 버전 등 속성 변경
      - 'build.gradle.kts' # 빌드 스크립트 변경
      - '*.gradle.kts' # 루트 또는 서브모듈 빌드 스크립트 변경

  # 2. Push: 'v'로 시작하는 태그 푸시 시 (릴리스 목적)
  push:
    tags:
      - 'v*' # 예: v1.0.0, v1.2.3-rc1

  # 3. Manual Trigger: GitHub Actions 탭에서 수동 실행
  workflow_dispatch:

# 중요: GitHub 저장소 설정에서 'main' 브랜치 보호 규칙(Branch Protection Rule)을
# 설정하고, 아래 'lint-test' Job (또는 그 name인 'Lint, Test & Validate Version')을
# 필수 상태 검사(Required status checks)로 지정해야 PR 병합 전 검증이 수행됩니다.

jobs:
  # =============================================================================
  # Job 1: 코드 린팅, 테스트 및 버전 유효성 검증 (PR 시에만 버전 검증 실행)
  # =============================================================================
  lint-test:
    name: Lint, Test & Validate Version
    runs-on: ubuntu-latest # 이 Job은 Ubuntu에서 실행

    steps:
      # ***** 수정: 로컬 재사용 워크플로우 사용 전에 코드 체크아웃 *****
      - name: Checkout code
        uses: actions/checkout@v4
        # fetch-depth: 0 은 재사용 워크플로우 내에서 처리하므로 여기선 불필요할 수 있음.
        # 필요 시 fetch-depth: 0 추가. (Get latest release tag 위해 필요)
        with:
          fetch-depth: 0 # 버전 비교를 위해 모든 태그/기록 필요

      # 1.1. 재사용 워크플로우를 사용하여 개발 환경 설정
      - name: Reusable Setup (Ubuntu)
        uses: ./.github/workflows/_reusable-setup.yml
        # 'with' 블록은 재사용 워크플로우의 inputs에 값을 전달.
        # fetch-depth는 checkout 단계에서 이미 처리했으므로,
        # 재사용 워크플로우 내 checkout에서 다시 fetch-depth를 지정할 필요는 없음.
        # 단, _reusable-setup.yml의 checkout 단계에서 fetch-depth 입력을 사용하지 않도록 수정하거나,
        # 여기서 전달하지 않아도 되도록 _reusable-setup.yml의 기본값을 조정하는 것이 좋음.
        # 여기서는 일단 fetch-depth: 0을 재사용 워크플로우에도 전달하는 것으로 유지.
        with:
          fetch-depth: 0 # 버전 비교를 위해 모든 태그/기록 필요

      # 1.2. Gradle 체크 및 린터 실행 (빌드 캐시 사용)
      - name: Run Checks & Linters
        run: ./gradlew check ktlintCheck --build-cache

      # --- PR 시 버전 유효성 검증 (아래 단계들은 PR 이벤트일 때만 실행) ---
      # 1.3. 가장 최신 시맨틱 버전 태그 가져오기
      - name: Get latest release tag
        id: get_latest_tag
        if: github.event_name == 'pull_request' # PR 이벤트일 때만 실행
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          semver_only: true # 시맨틱 버전 형식만 고려
          with_initial_version: true # 태그가 없을 경우 초기 버전 사용
          initial_version: "v0.0.0" # 초기 버전 지정

      # 1.4. gradle.properties 버전과 최신 릴리스 태그 비교 검증
      - name: Validate version increment vs latest release
        if: github.event_name == 'pull_request' # PR 이벤트일 때만 실행
        run: ./.github/scripts/validate-version.sh
        env:
          # 검증 스크립트에 최신 릴리스 태그 전달
          INPUT_LATEST_RELEASE_TAG: ${{ steps.get_latest_tag.outputs.tag }}

  # =============================================================================
  # Job 2: 플랫폼별 빌드 (릴리스 관련 이벤트 시 실행)
  # =============================================================================
  build:
    name: Build Multi-Platform (${{ matrix.os }})
    # 실행 조건: 태그 푸시 또는 수동 실행 시
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: lint-test # lint-test Job 성공 후 실행
    strategy:
      fail-fast: false # 하나의 빌드가 실패해도 다른 빌드는 계속 진행
      matrix:
        include:
          # Linux 빌드 설정
          - os: ubuntu-latest
            artifact-name: non-apple-binaries # 아티팩트 이름
            build-script: ./.github/scripts/build-non-apple.sh # 빌드 스크립트 경로
            setup-xcode: false # Xcode 설정 불필요
          # macOS 빌드 설정
          - os: macos-latest
            artifact-name: apple-binaries
            build-script: ./.github/scripts/build-apple.sh
            setup-xcode: true # Xcode 설정 필요
            xcode-version: '15.2' # 특정 Xcode 버전 지정 (필요시)

    # Matrix 조합별 실행 환경 설정
    runs-on: ${{ matrix.os }}

    steps:
      # ***** 로컬 재사용 워크플로우 사용 전에 코드 체크아웃 *****
      - name: Checkout code
        uses: actions/checkout@v4

      # 2.1. 재사용 워크플로우를 사용하여 개발 환경 설정 (Matrix 값 전달)
      - name: Reusable Setup (${{ matrix.os }})
        uses: ./.github/workflows/_reusable-setup.yml
        with:
          setup-xcode: ${{ matrix.setup-xcode }}
          # xcode-version이 matrix에 정의되지 않은 경우 기본값('latest') 사용
          xcode-version: ${{ matrix.xcode-version || 'latest' }}

      # 2.2. Matrix에 정의된 빌드 스크립트 실행
      - name: Build targets for ${{ matrix.os }}
        run: ${{ matrix.build-script }}

      # 2.3. 빌드 결과물(아티팩트) 업로드
      - name: Upload ${{ matrix.artifact-name }} build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }} # Matrix에 정의된 아티팩트 이름 사용
          path: library/build/bin/*/releaseShared/ # 업로드할 경로 패턴
          retention-days: 1 # 보관 기간 (1일)

  # =============================================================================
  # Job 3: 패키징 및 GitHub 릴리스 생성 (릴리스 관련 이벤트 시 실행)
  # =============================================================================
  package-release:
    name: Package and Release
    # 실행 조건: 태그 푸시 또는 수동 실행 시
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [build] # build Job 성공 후 실행 (모든 Matrix 빌드 완료 필요)
    runs-on: ubuntu-latest # 이 Job은 Ubuntu에서 실행
    permissions:
      contents: write # GitHub 릴리스 생성 및 에셋 업로드를 위해 'contents' 쓰기 권한 필요

    steps:
      # ***** 로컬 재사용 워크플로우 사용 전에 코드 체크아웃 *****
      - name: Checkout code
        uses: actions/checkout@v4

      # 3.1. 재사용 워크플로우를 사용하여 개발 환경 설정 (Ubuntu)
      - name: Reusable Setup (Ubuntu)
        uses: ./.github/workflows/_reusable-setup.yml

      # 3.2. gradle.properties 파일에서 버전 정보 가져오기
      - name: Get Version from Properties
        id: version # 이후 단계에서 참조하기 위한 ID
        run: ./.github/scripts/get-version-from-properties.sh

      # 3.3. 태그 푸시 이벤트일 경우, 푸시된 태그와 gradle.properties 버전 일치 여부 검증
      - name: Validate Tag matches from gradle.properties `libVersion`
        # 조건: 푸시 이벤트이고, ref가 'refs/tags/'로 시작할 때
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: ./.github/scripts/validate-tag.sh
        env:
          # 검증 스크립트에 필요한 정보 전달
          INPUT_PUSHED_TAG: ${{ github.ref_name }} # 푸시된 태그 이름 (e.g., v1.0.0)
          INPUT_VERSION_TAG_FROM_PROPS: ${{ steps.version.outputs.version_tag }} # properties에서 읽은 태그 형식 버전
          INPUT_COMMIT_SHA: ${{ github.sha }} # 현재 커밋 SHA

      # 3.4. 이전 'build' Job에서 업로드된 모든 아티팩트 다운로드
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts # 다운로드 받을 경로

      # 3.5. 다운로드된 아티팩트를 릴리스 에셋 형태로 준비 (이름 변경 등)
      - name: Prepare Release Assets (Rename binaries)
        run: ./.github/scripts/prepare-release-assets.sh downloaded-artifacts release-assets # 스크립트에 입력/출력 경로 전달

      # 3.6. 릴리스 노트 본문 생성 스크립트 실행
      - name: Generate Release Body
        run: ./.github/scripts/generate-release-body.sh
        env:
          # 스크립트에 버전 태그, 에셋 디렉토리, 출력 파일 경로 전달
          INPUT_VERSION_TAG: ${{ steps.version.outputs.version_tag }}
          INPUT_ASSETS_DIR: release-assets
          OUTPUT_BODY_FILE: .github/release-body.md

      # 3.7. 릴리스 에셋을 포함하는 Zip 아카이브 생성
      - name: Create zip archive
        id: zip # 이후 단계에서 zip 파일 이름 참조를 위한 ID
        run: ./.github/scripts/create-zip-archive.sh
        env:
          # 스크립트에 버전 번호 전달 (e.g., 1.0.0)
          INPUT_VERSION_NUM: ${{ steps.version.outputs.version_num }}

      # 3.8. GitHub 릴리스 생성 및 에셋(Zip 파일, 개별 바이너리) 업로드
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        # 참고: 이 액션은 내부적으로 GITHUB_TOKEN을 사용합니다.
        # 만약 외부 레지스트리 배포 등 추가 작업이 필요하다면,
        # 해당 서비스의 인증 토큰을 GitHub Secrets에 저장하고 사용해야 합니다.
        #env:
        #  CUSTOM_TOKEN: ${{ secrets.CUSTOM_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version_tag }} # 릴리스 태그 이름
          name: Release ${{ steps.version.outputs.version_num }} # 릴리스 제목
          body_path: .github/release-body.md # 릴리스 노트 본문 파일 경로
          draft: false # 정식 릴리스로 생성 (true면 초안)
          prerelease: false # 시험판 릴리스 아님 (true면 시험판)
          files: | # 업로드할 파일 목록 (glob 패턴 사용 가능)
            ${{ steps.zip.outputs.zip_name }} # 생성된 Zip 파일
            release-assets/*/* # 준비된 개별 바이너리 에셋
          # generate_release_notes: true # GitHub 자동 릴리스 노트 생성 기능 사용 여부 (선택 사항)
