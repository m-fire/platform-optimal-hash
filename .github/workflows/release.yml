# .github/workflows/release.yml
# 설명: 태그 기반 빌드 및 릴리스 워크플로우
name: Release Workflow

# ================= Trigger Conditions =================
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # 시맨틱 버전 태그 (예: v1.0.0, v1.2.3-rc1)
  workflow_dispatch: # 수동 실행 허용

# ================= Permissions =================
permissions:
  contents: read # 기본 권한은 읽기

# ================= Jobs =================
jobs:
  # -----------------------------------------------------
  # Job 1: Validate Release Version
  # -----------------------------------------------------
  validate-release-version:
    name: Validate Release Version
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java and Gradle
        uses: ./.github/actions/setup-java-gradle
        with:
          java-version: '17'
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/scripts/*.sh
      - name: Validate Tag Version Match
        run: ./.github/scripts/validate-tag-version.sh
        env:
          INPUT_PUSHED_TAG: ${{ github.ref_name }}

  # -----------------------------------------------------
  # Job 2: Build Non-Apple Platforms
  # -----------------------------------------------------
  build-non-apple:
    name: Build Non-Apple (Linux, Android, Windows)
    needs: validate-release-version
    runs-on: ubuntu-latest
    outputs:
      artifact-name: 'non-apple-binaries'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java and Gradle
        uses: ./.github/actions/setup-java-gradle
        with:
          java-version: '17'
      - name: Build Non-Apple targets
        shell: bash
        run: |
          set -e
          echo "Building Non-Apple targets for tag ${{ needs.validate-release-version.outputs.release_tag }}..."
          ./gradlew --build-cache \
                    :library:linkReleaseSharedLinuxX64 \
                    :library:linkReleaseSharedAndroidNativeArm64 \
                    :library:linkReleaseSharedAndroidNativeX64 \
                    :library:linkReleaseSharedWindowsX64
          echo "Non-Apple build completed."
      - name: Upload Non-Apple build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: non-apple-binaries
          path: library/build/bin/*/releaseShared/
          retention-days: 1

  # -----------------------------------------------------
  # Job 3: Build Apple Platforms
  # -----------------------------------------------------
  build-apple:
    name: Build Apple (macOS, iOS)
    needs: validate-release-version
    runs-on: macos-latest
    outputs:
      artifact-name: 'apple-binaries'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java and Gradle
        uses: ./.github/actions/setup-java-gradle
        with:
          java-version: '17'
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'
      - name: Build Apple targets
        shell: bash
        run: |
          set -e
          echo "Building Apple targets for tag ${{ needs.validate-release-version.outputs.release_tag }}..."
          ./gradlew --build-cache \
                    :library:linkReleaseSharedMacosArm64 \
                    :library:linkReleaseSharedMacosX64 \
                    :library:linkReleaseSharedIosArm64 \
                    :library:linkReleaseSharedIosX64
          echo "Apple build completed."
      - name: Upload Apple build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apple-binaries
          path: library/build/bin/*/releaseShared/
          retention-days: 1

  # -----------------------------------------------------
  # Job 4: Package and Release
  # -----------------------------------------------------
  package-release:
    name: Package and Create Release
    needs: [validate-release-version, build-non-apple, build-apple]
    runs-on: ubuntu-latest
    permissions:
      contents: write # 릴리스 생성 및 에셋 업로드를 위해 쓰기 권한 필요
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/scripts/*.sh
      - name: Determine Version from Properties
        id: version
        run: ./.github/scripts/get-version-from-gradle.sh
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
      - name: Prepare Release Assets
        run: ./.github/scripts/prepare-release-assets.sh downloaded-artifacts release-assets
      - name: Create zip archive of assets
        id: zip
        shell: bash
        run: |
          set -e
          PKG_NAME="platform-binaries-${{ steps.version.outputs.version_num }}"
          ZIP_FILENAME="${PKG_NAME}.zip"
          echo "Creating zip archive: ${ZIP_FILENAME}"
          # release-assets 폴더 내용을 현재 위치에 압축
          cd release-assets
          zip -r "../${ZIP_FILENAME}" .
          cd ..
          echo "Zip file created: ${ZIP_FILENAME}"
          echo "zip_name=${ZIP_FILENAME}" >> $GITHUB_OUTPUT
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release-version.outputs.release_tag }}
          name: Release ${{ steps.version.outputs.version_num }}
          draft: false
          prerelease: contains(needs.validate-release-version.outputs.release_tag, '-')
          files: | # Zip 파일과 release-assets 폴더 내 모든 파일을 업로드
            ${{ steps.zip.outputs.zip_name }}
            release-assets/*
          generate_release_notes: true
