# .github/workflows/release.yml
# KMP 라이브러리 릴리즈 워크플로우 (Composite Actions 사용)
name: Release KMP Native Libraries

on:
  workflow_dispatch:
    inputs:
      version:
        description: '릴리즈 버전 (예: 1.0.0) - gradle.properties의 libVersion과 일치해야 함'
        required: true
        type: string
      releaseTitle:
        description: '릴리즈 제목 (예: Release v1.0.0)'
        required: true
        type: string
      releaseNotes:
        description: '릴리즈 노트 (마크다운 지원, 비워두면 자동 생성 시도)'
        required: false
        type: string
      draft:
        description: '드래프트(초안) 릴리즈로 생성'
        required: false
        type: boolean
        default: true
      prerelease:
        description: '프리릴리즈(시험판)로 표시'
        required: false
        type: boolean
        default: false
      publishToMavenCentral:
        description: 'Maven Central에 게시 (Gradle publish 태스크 사용)'
        required: false
        type: boolean
        default: false

jobs:
  # =============================================================================
  # Job 1: 릴리즈 준비 검증 (버전 확인 등)
  # =============================================================================
  validate:
    name: Validate Release Configuration
    runs-on: ubuntu-latest
    outputs:
      # Python 스크립트가 설정한 출력을 그대로 사용
      version_tag: ${{ steps.version.outputs.version_tag }}
      version_num: ${{ steps.version.outputs.version_num }}

    steps:
      # 1.1. 코드 체크아웃 (태그 비교 위해 전체 기록 가져오기)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 태그 기록 필요 시 0 유지

      # 1.2. 환경 설정 (Composite Action 사용)
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          java-version: '17'
          setup-python: 'true' # Python 스크립트 실행 위해 true로 설정
          python-version: '3.10' # 스크립트 호환 버전 명시 권장

      # 1.3. 입력 버전과 gradle.properties 버전 일치 확인
      - name: Check Version Consistency
        id: version # 이전과 동일한 ID 유지하여 출력 참조 가능
        # Python 스크립트 실행. 스크립트 경로는 실제 위치에 맞게 조정 필요.
        # 스크립트가 .github/scripts/ 에 있다고 가정.
        run: python ./.github/scripts/validate_version_consistency.py --expected-version "${{ github.event.inputs.version }}"
        # 스크립트가 실패하면 워크플로우 중단 (non-zero exit code)

      # 1.4. 코드 검사 및 테스트
      - name: Run Checks, Linters and Unit Tests
        run: ./gradlew check --build-cache

  # =============================================================================
  # Job 2: Linux, Windows, Android 타겟 빌드
  # =============================================================================
  build_linux_windows_android:
    name: Build Linux + Windows + Android
    runs-on: ubuntu-latest
    needs: validate
    steps:
      # 2.1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2.2. 환경 설정 (Composite Action 사용)
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          java-version: '17'

      # 2.3. Gradle 'assemble' 실행
      - name: Build All Targets (Assemble)
        run: ./gradlew assemble --build-cache

      # 2.4. 빌드 결과물 아티팩트로 업로드
      - name: Upload Linux/Windows/Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: non-apple-binaries
          path: |
            library/build/bin/linuxX64/releaseShared/
            library/build/bin/windowsX64/releaseShared/
            library/build/bin/androidNativeArm64/releaseShared/
            library/build/bin/androidNativeX64/releaseShared/
          retention-days: 1

  # =============================================================================
  # Job 3: Apple (macOS, iOS) 타겟 빌드
  # =============================================================================
  build_apple:
    name: Build macOS + iOS
    runs-on: macos-latest
    needs: validate

    steps:
      # 3.1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 3.2. 환경 설정 (Composite Action 사용, Xcode 활성화)
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          java-version: '17'
          setup-xcode: 'true'

      # 3.3. Gradle 'assemble' 실행
      - name: Build All Targets (Assemble)
        run: ./gradlew assemble --build-cache

      # 3.4. 빌드 결과물 아티팩트로 업로드
      - name: Upload Apple Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apple-binaries
          path: |
            library/build/bin/macosArm64/releaseShared/
            library/build/bin/macosX64/releaseShared/
            library/build/bin/iosArm64/releaseShared/
            library/build/bin/iosX64/releaseShared/
          retention-days: 1

  # =============================================================================
  # Job 4: 릴리즈 생성 및 패키징
  # =============================================================================
  create_release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [validate, build_linux_windows_android, build_apple]

    steps:
      # 4.1. 코드 체크아웃 (gradle.properties 필요)
      - name: Checkout code
        uses: actions/checkout@v4

      # 4.2. 릴리즈 준비 (Composite Action 사용)
      - name: Prepare Release Assets and Info
        id: prepare
        uses: ./.github/actions/prepare-release
        with:
          version: ${{ needs.validate.outputs.version_num }}

      # 4.3. GitHub 릴리즈 생성 및 에셋 업로드
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version_tag }}
          name: ${{ github.event.inputs.releaseTitle }}
          body_path: ${{ steps.prepare.outputs.body_path }} # 컴포지트 액션 출력 사용
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            ${{ steps.prepare.outputs.zip_path }} # 컴포지트 액션 출력 사용
            release-assets/**/* # 컴포지트 액션이 준비한 에셋 경로

  # =============================================================================
  # Job 5: Maven Central 배포 (선택 사항)
  # =============================================================================
#  publish_maven:
#    name: Publish to Maven Central
#    if: ${{ github.event.inputs.publishToMavenCentral == true }}
#    runs-on: ubuntu-latest
#    needs: [validate, create_release] # 릴리즈 생성 완료 후
#
#    steps:
#      # 5.1. 코드 체크아웃
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # 5.2. 환경 설정 (Composite Action 사용)
#      - name: Setup Environment
#        uses: ./.github/actions/setup-environment
#        with:
#          java-version: '17'
#
#      # 5.3. 라이브러리 퍼블리시 (Composite Action 사용)
#      - name: Publish Library
#        uses: ./.github/actions/publish-library
#        with:
#          # 그룹 ID는 프로젝트에 맞게 설정
#          sonatype-profile: io.stormi.support.platform.collection.hash
#        secrets:
#          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
