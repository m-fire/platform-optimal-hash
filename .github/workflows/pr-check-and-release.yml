# 워크플로우 이름
name: PR Check & Release on Tag

# 워크플로우 트리거 조건
on:
  # PR 시: main 브랜치 대상 Pull Request
  pull_request:
    branches: [ main ]
    paths:
     - '.github/**' # 워크플로우 변경 감지
     - 'library/**' # src 변경 감지
     - 'gradle/**' # Gradle 의존성 및 버전 변경감지
     - 'gradle.properties' # 프로젝트 속성값 변경 감지

  # 릴리스 시: v* 태그 변경감지 푸시 (릴리스 버저닝)
  push:
    tags:
      - 'v*' # 시맨틱 버전 태그 (예: v1.0.0, v1.2.3-rc1)

  # 수동 실행 (릴리스 목적)
  workflow_dispatch:

# 브랜치 보호 규칙 안내 수정
# 중요: GitHub 저장소 설정에서 'main' 브랜치 보호 규칙(Branch Protection Rule)을
# 설정하고, 아래 'lint-test' Job (또는 그 name인 'Lint, Test & Validate Version')을
# 필수 상태 검사(Required status checks)로 지정해야 PR 병합 전 검증이 수행됩니다.

jobs:
  # =============================================================================
  # Job 1: 코드 린팅 및 테스트 (모든 관련 트리거에서 실행)
  # =============================================================================
  lint-test:
    name: Lint, Test & Validate Version # Job 이름 업데이트
    runs-on: ubuntu-latest
    # PR 시 실행조건
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 모든 태그 가져오기

      - name: Set up Java
        uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Checks & Linters
        run: ./gradlew check ktlintCheck --build-cache

      # --- 버전 유효성 검증 (스크립트 호출로 변경) ---
      - name: Get latest release tag
        id: get_latest_tag
        # PR 시에만 최신 태그 가져오기 (릴리스 시에는 불필요)
        if: github.event_name == 'pull_request'
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          semver_only: true
          with_initial_version: true
          initial_version: "0.0.0"

      # 모든 필요 스크립트 실행 권한 부여
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      - name: Validate version increment # 스텝 이름 변경
        # PR 시에만 실행
        if: github.event_name == 'pull_request'
        # 스크립트 호출
        run: ./.github/workflows/scripts/validate-version.sh
        env:
          # 스크립트에 최신 태그 전달
          INPUT_LATEST_RELEASE_TAG: ${{ steps.get_latest_tag.outputs.tag }}

  # =============================================================================
  # Job 2: 플랫폼별 빌드 (릴리스 시에만 실행 - 이전과 동일)
  # =============================================================================
  build-non-apple:
    name: Build Non-Apple (Linux, Android, Windows)
    # 태그 푸시 또는 수동 실행 시에만 실행
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: lint-test # 모든 경우에 lint-test가 먼저 실행되도록 함
    outputs:
      artifact-name: 'non-apple-binaries'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - uses: gradle/actions/setup-gradle@v4
      - name: Build Non-Apple targets
        run: |
          ./gradlew --build-cache \
                    :library:linkReleaseSharedLinuxX64 \
                    :library:linkReleaseSharedAndroidNativeArm64 \
                    :library:linkReleaseSharedAndroidNativeX64 \
                    :library:linkReleaseSharedWindowsX64 \
                    #:library:linkReleaseSharedMingwX64 \ # Windows 대상 기본 테스크
                    # 필요시 assembleRelease 등 다른 태스크 사용
      - name: Upload Non-Apple build artifacts for release
        uses: actions/upload-artifact@v4
        with: { name: 'non-apple-binaries', path: 'library/build/bin/*/releaseShared/', retention-days: 1 }

  build-apple:
    name: Build Apple (macOS, iOS)
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    needs: lint-test
    outputs:
      artifact-name: 'apple-binaries'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - uses: maxim-lobanov/setup-xcode@v1
        with: { xcode-version: '15.2' }
      - uses: gradle/actions/setup-gradle@v4
      - name: Build Apple targets
        run: |
          ./gradlew --build-cache \
                    :library:linkReleaseSharedMacosArm64 \
                    :library:linkReleaseSharedMacosX64 \
                    :library:linkReleaseSharedIosArm64 \
                    :library:linkReleaseSharedIosX64 \
                    #:library:linkReleaseSharedIosSimulatorArm64 # 필요 시 추가
      - name: Upload Apple build artifacts for release
        uses: actions/upload-artifact@v4
        with: { name: 'apple-binaries', path: 'library/build/bin/*/releaseShared/', retention-days: 1 }

  # =============================================================================
  # Job 4: 패키징 및 릴리스 (태그 푸시 또는 수동 실행 시에만 실행)
  # =============================================================================
  package-release:
    name: Package and Release
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-non-apple, build-apple] # build Job들은 릴리스 시에만 실행됨
    permissions: { contents: write }

    steps:
      - uses: actions/checkout@v4 # gradle.properties 읽기 및 스크립트 사용 위해 필요

      # 모든 필요 스크립트 실행 권한 부여
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      # 버전 결정
      - name: Determine Version from Properties
        id: version # 스텝 ID는 후속 참조를 위해 유지
        run: ./.github/workflows/scripts/get-version-from-gradle.sh

      # 빌드 아티팩트 다운로드
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with: { path: downloaded-artifacts }

      # 릴리스 에셋 준비 스크립트 실행
      - name: Prepare Release Assets (Rename binaries)
        run: ./.github/workflows/scripts/prepare-release-assets.sh downloaded-artifacts release-assets

      # Zip 아카이브 생성
      - name: Create zip archive
        id: zip
        run: |
          PKG_NAME="platform-binaries-${{ steps.version.outputs.version_num }}"
          ZIP_FILENAME="${PKG_NAME}.zip"
          cd release-assets
          zip -r "../${ZIP_FILENAME}" .
          cd ..
          echo "Zip file created: ${ZIP_FILENAME}"
          echo "zip_name=${ZIP_FILENAME}" >> $GITHUB_OUTPUT

      # GitHub 릴리스 생성 및 에셋 업로드
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version_tag }}
          name: Release ${{ steps.version.outputs.version_num }}
          draft: false
          prerelease: false
          files: |
            ${{ steps.zip.outputs.zip_name }}
            release-assets/*
          generate_release_notes: true
          body: |
            ## Platform binary release ${{ steps.version.outputs.version_tag }}
            **Included Platforms:**
            - Android (arm64, x64)
            - iOS (arm64, x64)
            - macOS (arm64, x64)
            - Windows (x64)
            - Linux (x64)
