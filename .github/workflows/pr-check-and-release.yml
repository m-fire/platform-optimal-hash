# 워크플로우 이름
name: PR Check & Release on Tag

# 워크플로우 트리거 조건
on:
  # PR 시: main 브랜치 대상 Pull Request
  pull_request:
    branches: [ main ]
    paths:
     - '.github/**' # 워크플로우 변경 감지
     - 'library/**' # src 변경 감지
     - 'gradle/**' # Gradle 의존성 및 버전 변경감지
     - 'gradle.properties' # 프로젝트 속성값 변경 감지

  # 릴리스 시: v* 태그 변경감지 푸시 (릴리스 버저닝)
  push:
    tags:
      - 'v*' # 시맨틱 버전 태그 (예: v1.0.0, v1.2.3-rc1)

  # 수동 실행 (릴리스 목적)
  workflow_dispatch:

# 브랜치 보호 규칙 안내 수정
# 중요: GitHub 저장소 설정에서 'main' 브랜치 보호 규칙(Branch Protection Rule)을
# 설정하고, 아래 'lint-test' Job (또는 그 name인 'Lint, Test & Validate Version')을
# 필수 상태 검사(Required status checks)로 지정해야 PR 병합 전 검증이 수행됩니다.

jobs:
  # =============================================================================
  # Job 1: 코드 린팅, 테스트 및 버전 유효성 검증 (PR 시에만 버전 검증 실행)
  # =============================================================================
  lint-test:
    name: Lint, Test & Validate Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 모든 태그 가져오기

      - name: Set up Java
        uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      # [수정] 모든 스크립트 실행 권한 부여 위치 변경 (각 Job 시작 시)
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      - name: Run Checks & Linters
        run: ./gradlew check ktlintCheck --build-cache

      # --- PR 시 버전 유효성 검증 ---
      - name: Get latest release tag
        id: get_latest_tag
        if: github.event_name == 'pull_request' # PR 시에만 실행
        uses: actions-ecosystem/action-get-latest-tag@v1
        with: { semver_only: true, with_initial_version: true, initial_version: "0.0.0" }

      - name: Validate version increment vs latest release
        if: github.event_name == 'pull_request'
        run: ./.github/workflows/scripts/validate-version.sh
        env:
          # 스크립트에 최신 태그 전달
          INPUT_LATEST_RELEASE_TAG: ${{ steps.get_latest_tag.outputs.tag }}

  # =============================================================================
  # Job 2: 플랫폼별 빌드 (릴리스 시 실행)
  # =============================================================================

  build-non-apple:
    name: Build Non-Apple (Linux, Android, Windows)
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: lint-test
    outputs: { artifact-name: 'non-apple-binaries' }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - uses: gradle/actions/setup-gradle@v4
        with: { cache-read-only: false }

      # 스크립트 실행 권한 부여
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      # 빌드 스크립트 호출
      - name: Build Non-Apple targets
        run: ./.github/workflows/scripts/build-non-apple.sh

      - name: Upload Non-Apple build artifacts for release
        uses: actions/upload-artifact@v4
        with: { name: 'non-apple-binaries', path: 'library/build/bin/*/releaseShared/', retention-days: 1 }

  build-apple:
    name: Build Apple (macOS, iOS)
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    needs: lint-test
    outputs: { artifact-name: 'apple-binaries' }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: 'temurin', java-version: '17' }
      - uses: maxim-lobanov/setup-xcode@v1
        with: { xcode-version: '15.2' }
      - uses: gradle/actions/setup-gradle@v4
        with: { cache-read-only: false }

      # 스크립트 실행 권한 부여
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      # 빌드 스크립트 호출
      - name: Build Apple targets
        run: ./.github/workflows/scripts/build-apple.sh

      - name: Upload Apple build artifacts for release
        uses: actions/upload-artifact@v4
        with: { name: 'apple-binaries', path: 'library/build/bin/*/releaseShared/', retention-days: 1 }

  # =============================================================================
  # Job 3: 패키징 및 릴리스 (Git 태그 푸시 및 수동 워크플로 실행 시)
  # =============================================================================
  package-release:
    name: Package and Release
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build-non-apple, build-apple]
    permissions: { contents: write }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: { ref: ${{ github.ref }} }

      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      - name: Get Version from Properties
        id: version
        run: ./.github/workflows/scripts/get-version-from-properties.sh

      - name: Validate Tag matches from gradle.properties `libVersion`
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: ./.github/workflows/scripts/validate-tag.sh
        env:
          INPUT_PUSHED_TAG: ${{ github.ref_name }}
          INPUT_VERSION_TAG_FROM_PROPS: ${{ steps.version.outputs.version_tag }}
          INPUT_COMMIT_SHA: ${{ github.sha }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with: { path: downloaded-artifacts }

      - name: Prepare Release Assets (Rename binaries)
        run: ./.github/workflows/scripts/prepare-release-assets.sh downloaded-artifacts release-assets

      # 릴리스 본문 생성 스크립트 실행
      - name: Generate Release Body
        run: ./.github/workflows/scripts/generate-release-body.sh
        env:
          INPUT_VERSION_TAG: ${{ steps.version.outputs.version_tag }}
          INPUT_ASSETS_DIR: release-assets # prepare-release-assets.sh 의 출력 디렉토리
          OUTPUT_BODY_FILE: .github/release-body.md # 생성될 파일 경로

      # Zip 아카이브 생성
      - name: Create zip archive
        id: zip
        run: ./.github/workflows/scripts/create-zip-archive.sh
        env:
          INPUT_VERSION_NUM: ${{ steps.version.outputs.version_num }}
          # INPUT_ASSETS_DIR: release-assets # 스크립트 내 기본값 사용
          # INPUT_OUTPUT_DIR: . # 스크립트 내 기본값 사용

      # GitHub 릴리스 생성 및 에셋 업로드
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version_tag }}
          name: Release ${{ steps.version.outputs.version_num }}
          # 스크립트로 생성된 릴리즈 본문 설정.
          body_path: .github/release-body.md
          draft: false
          prerelease: false
          files: |
            ${{ steps.zip.outputs.zip_name }}
            release-assets/*
          # 기본 자동 생성 기능과 병행 사용 가능 (선택 사항)
          generate_release_notes: true
