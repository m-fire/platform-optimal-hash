# 워크플로우 이름
# [수정] 역할에 맞게 이름 변경 (PR 검증 및 태그 릴리스)
name: PR Check & Release on Tag

# 워크플로우 트리거 조건
on:
  # [수정] main 브랜치 대상 Pull Request 발생/업데이트 시 실행 (커밋 전 검증 목적)
  pull_request:
    branches: [ main ]
    paths:
     - '.github/**'
     - 'library/**'
      # 필요에 따라 다른 경로 추가

  # [유지] v* 태그 푸시 시 실행 (릴리스 생성 목적)
  push:
    tags:
      - 'v*'

  # [유지] 수동 실행
  workflow_dispatch:
    inputs:
      version:
        description: '릴리스 버전 (예: 1.0.0)'
        required: false
        default: ''

# [중요] PR 기반 워크플로우를 효과적으로 사용하려면, GitHub 저장소 설정에서
# 'main' 브랜치에 대한 보호 규칙(Branch Protection Rule)을 설정해야 합니다.
# 규칙 내용:
# 1. Require status checks to pass before merging 활성화
# 2. Status checks 목록에서 이 워크플로우의 Job 이름(예: 'build-check-release') 선택

jobs:
  # [수정] Job 이름 변경
  build-check-release:
    runs-on: macos-latest # Apple 플랫폼 빌드를 위해 macOS 사용
    steps:
      # 0. 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 1. 모든 쉘 스크립트 실행권한 보장
      - name: 1. Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/*.sh

      # 2. Gradle 버전 자동 증가 (필요시 활성화)
      #    - 주의: PR 워크플로우에서는 버전 범프를 실행하면 충돌 가능성 있음
      #    - 태그 기반 릴리스 시에만 실행하거나, 별도 관리 권장
      # - name: 2. Bump Gradle version
      #   if: startsWith(github.ref, 'refs/tags/') # 태그 푸시 시에만 실행 권장
      #   run: ./.github/workflows/scripts/bump-gradle-version.sh

      # 3. Xcode 설정
      - name: 3. Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          # 특정 버전 명시 권장 (예: '15.2')
          xcode-version: '15.2' # latest-stable 대신 특정 버전 사용

      # 4. JDK 설정
      - name: 4. Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 5. Gradle 설정
      - name: 5. Set up Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-disabled: false
          # Gradle 빌드 최적화 옵션 추가 고려 (예: configuration-cache)
          arguments: --configuration-cache assemble # 예시

      # 6. 빌드 실행 (릴리스에 필요한 태스크만 실행 권장)
      - name: 6. Build all targets
        run: ./gradlew assemble # 또는 Gradle 태스크 추가 시 해당 태스크 포함

      # 7. 버전 결정
      #    - PR 시에는 버전 결정이 불필요할 수 있음 (태그/수동 입력 기반)
      #    - 이 스텝은 태그/수동 실행 시에만 필요할 수 있으므로 조건 추가 고려
      - name: 7. Determine Version
        id: version
        # [수정] 태그 또는 수동 실행 시에만 버전 결정 필요
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        run: ./.github/workflows/scripts/github-determine-version.sh
        env:
          WORKFLOW_INPUT_VERSION: ${{ github.event.inputs.version }}
          WORKFLOW_GITHUB_REF: ${{ github.ref }}

      # 8. 바이너리 패키징
      #    - PR 검증 시에도 패키징 자체는 실행하여 확인 가능
      - name: 8. Package Binaries
        run: ./.github/workflows/scripts/package-binaries.sh "${{ steps.version.outputs.version_num || 'pr-check' }}" "library" "bin"
        # PR 시에는 version_num 이 없을 수 있으므로 기본값(예: pr-check) 사용

      # [수정] 태그 푸시 시에만 바이너리 커밋
      - name: 9. Commit and Push Binaries to Main Branch
        if: startsWith(github.ref, 'refs/tags/')
        run: ./.github/workflows/scripts/commit-push-binaries.sh
        env:
          # commit-push-binaries.sh 스크립트가 version_tag 없이도 동작 가능한지 확인 필요
          INPUT_VERSION_TAG: ${{ steps.version.outputs.version_tag }}
          INPUT_GIT_USER_NAME: GH-Action[bot]
          INPUT_GIT_USER_EMAIL: GH-Action[bot]@noreply.github.com

      # [유지] 태그 푸시 시에만 GitHub 릴리스 생성
      - name: 10. Create Release and Upload Assets
        if: startsWith(github.ref, 'refs/tags/') # 태그 푸시 시에만 릴리스 실행
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version_tag }} # github-determine-version.sh 결과 사용
          name: Release ${{ steps.version.outputs.version_num }} # github-determine-version.sh 결과 사용
          draft: false
          prerelease: false
          files: |
            platform-binaries-*.zip
            bin/*/* # 모든 플랫폼의 최종 바이너리 파일 업로드
          generate_release_notes: true
          body: |
            ## Platform binary release ${{ steps.version.outputs.version_tag }}
            바이너리는 하나의 zip 파일과 아래의 개별 에셋으로 제공됩니다.
            개별 바이너리는 리포지토리의 `./bin` 디렉토리(`main` 브랜치에 커밋됨)에서 직접 사용할 수도 있습니다.
            **Included Platforms:** (실제 빌드 대상에 따라 이 목록을 업데이트하세요.)
            - Android (arm64, x64)
            - iOS (arm64, x64)
            - macOS (arm64, x64)
            - Windows (x64)
            - Linux (x64)
