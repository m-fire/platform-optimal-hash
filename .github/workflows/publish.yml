# 워크플로우 이름
name: Publish & Copy platform binaries

# 워크플로우 트리거 조건
on:
  push:
    branches: [ main ]
    paths:
      - 'library/**'  # library 모듈 변경 시에만 실행
    tags:
      - 'v*'  # v로 시작하는 태그 푸시 시에만 실행
  workflow_dispatch: # 수동 트리거
    inputs:
      version:
        description: '릴리스 버전 (예: 1.0.0)'
        required: false
        default: ''

jobs:
  build-commit-release:
    runs-on: macos-latest # Apple 플랫폼 빌드를 위해 macOS 사용

    steps:
      # 0. 소스 코드 체크아웃
      #    저장소 푸시를 위해 충분한 권한이 있는 토큰 설정 (예: PAT)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 저장소 쓰기 권한이 있는 토큰 사용 권장
          token: ${{ secrets.GITHUB_TOKEN }} # 기본 토큰 사용 (권한 부족 시 PAT로 변경)

      # 1. 모든 스크립트 실행권한 보장
      - name: Ensure all scripts are executable
        run: chmod +x ./.github/workflows/scripts/bump-gradle-version.sh ./scripts/*.sh

      # 2. build.gradle.kts 버전 증가
      - name: Bump Gradle version
        run: ./.github/workflows/scripts/bump-gradle-version.sh

      # 3. Xcode 설정
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # 4. JDK 설정
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # 5. Gradle 설정 (JDK 17 포함 및 캐싱 최적화)
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          java-version: '17'

      # 6. 모든 타겟 빌드
      - name: Build all targets
        run: ./gradlew assemble

      # 7. 버전 결정 (외부 스크립트 사용)
      - name: Github Workflow determine Version
        id: version # 스텝 ID 설정하여 출력값 참조
        run: ./.github/workflows/scripts/github-determine-version.sh
        env:
          WORKFLOW_INPUT_VERSION: ${{ github.event.inputs.version }}
          WORKFLOW_GITHUB_REF: ${{ github.ref }}

      # 8. 패키징 및 바이너리 복사 (기존 스크립트 사용)
      - name: Package and Copy Binaries
        run: ./.github/workflows/scripts/package-binaries.sh "${{ steps.version.outputs.version_num }}" "library" "bin"

      # 9. 저장소에 바이너리 커밋 및 푸시 (태그 푸시 시에만)
      - name: Commit and Push Binaries to Main Branch
        if: startsWith(github.ref, 'refs/tags/') # 태그 푸시 시에만 실행
        run: ./.github/workflows/scripts/commit-push-binaries.sh
        env:
          INPUT_VERSION_TAG: ${{ steps.version.outputs.version_tag }}
          INPUT_GIT_USER_NAME: github-actions[bot]
          INPUT_GIT_USER_EMAIL: github-actions[bot]@users.noreply.github.com
          INPUT_TARGET_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      # 10. GitHub Release 생성 및 에셋 업로드
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        # 태그 푸시 또는 수동 실행 시 항상 실행 (수동 실행 시 커밋 단계는 건너뜀)
        with:
          tag_name: ${{ steps.version.outputs.version_tag }} # 버전 결정 스크립트 출력 사용
          name: Release ${{ steps.version.outputs.version_num }} # 버전 결정 스크립트 출력 사용
          draft: false
          prerelease: false
          files: |
            platform-binaries-${{ steps.version.outputs.version_num }}.zip # 루트의 zip 파일
            library/build/bin/**/releaseShared/*.so # 빌드된 개별 바이너리
            library/build/bin/**/releaseShared/*.dylib
            library/build/bin/**/releaseShared/*.dll
          generate_release_notes: true
          body: |
            ## Platform binary release ${{ steps.version.outputs.version_tag }}

            Binaries are available as a single zip file and individual assets below.
            Individual binaries are also available directly in the repository under the `/bin` directory (committed to the `main` branch).

            **Included Platforms:**
            - Android (arm64, x64)
            - iOS (arm64, x64)
            - macOS (arm64, x64)
            - Windows (x64)
            - Linux (x64)
        env:
          # 릴리스 생성 권한이 있는 토큰 (기본 토큰으로 충분할 수 있음)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
