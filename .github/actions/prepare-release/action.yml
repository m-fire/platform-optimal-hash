# .github/actions/prepare-release/action.yml
# 릴리스 준비 복합 액션 (아티팩트 다운로드, 에셋 준비, 정보 생성)
name: 'Prepare Release Assets and Info'
description: 'Downloads build artifacts, prepares release assets, generates release body and zip archive.'
inputs:
  version:
    description: '릴리스 버전 번호(1.0.0) 주의: "v" 접두사 제외'
    required: true
    type: string
  python-version:
    description: '사용할 Python 버전'
    required: false
    default: '3.10'
    type: string
  artifact-download-path:
    description: '빌드 아티팩트를 다운로드할 경로'
    required: false
    default: 'downloaded-artifacts' # 액션 실행 워크스페이스 내 경로
    type: string
  prepared-assets-path:
    description: '준비된 릴리스 에셋을 저장할 경로'
    required: false
    default: 'release-assets' # 액션 실행 워크스페이스 내 경로
    type: string
  output-body-file:
    description: '생성될 릴리스 본문 파일 경로'
    required: false
    default: 'release-body.md' # 액션 실행 워크스페이스 내 경로
    type: string
  output-zip-file-pattern:
    description: '생성될 Zip 파일 이름 패턴 (버전 포함, 예: platform-binaries-{version}.zip)'
    required: false
    default: 'platform-binaries-{version}.zip'
    type: string

outputs:
  body_path:
    description: '생성된 릴리스 본문 파일의 절대 경로'
    value: ${{ steps.generate_info.outputs.body_path }}
  zip_path:
    description: '생성된 Zip 아카이브 파일의 절대 경로'
    value: ${{ steps.generate_info.outputs.zip_path }}

runs:
  using: "composite"
  steps:
    # 1. Python 설정 (스크립트 실행 위해 필요)
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    # 2. 단일 빌드 아티팩트 다운로드
    # 'all-binaries' 아티팩트만 다운로드하도록 name을 지정합니다.
    - name: Download all build artifact
      uses: actions/download-artifact@v4
      with:
        name: all-binaries # 다운로드할 아티팩트 이름 지정
        # 지정된 경로에 다운로드됨
        path: ${{ inputs.artifact-download-path }}

    # 3. 릴리스 에셋 준비 (Python 스크립트 실행)
    # 스크립트 경로는 이 action.yml 파일 위치 기준이 아닌, 워크플로우 실행 컨텍스트 기준임.
    # 따라서 스크립트가 저장소 루트의 .github/scripts/ 에 있다고 가정.
    # prepare_release_assets.py 스크립트가 다운로드된 아티팩트의 새로운 구조를 처리하도록 수정 필요
    - name: Prepare Release Assets
      id: prepare_assets
      shell: bash # bash/sh 사용 명시
      # 워크플로우 루트의 gradle.properties 참조 가정
      run: |
        # 다운로드된 아티팩트 경로는 artifact-download-path/all-binaries/ 형태가 될 수 있습니다.
        # prepare_release_assets.py 스크립트가 이 구조를 처리하도록 수정해야 합니다.
        # 현재는 다운로드 경로 자체를 input-dir로 전달합니다.
        python ./.github/scripts/prepare_release_assets.py \
          --input-dir "${{ inputs.artifact-download-path }}" \
          --output-dir "${{ inputs.prepared-assets-path }}" \
          --prop-file gradle.properties

    # 4. 릴리스 정보 생성 (본문, Zip) (Python 스크립트 실행)
    - name: Generate Release Info (Body and Zip)
      id: generate_info
      shell: bash
      run: |
        # 입력 버전에서 'v' 제거 (스크립트가 처리하지 않는 경우)
        VERSION_NUM=$(echo "${{ inputs.version }}" | sed 's/^v//')
        echo "Version number for scripts: $VERSION_NUM"

        # Zip 파일 이름 생성
        output_zip_file=$(echo "${{ inputs.output-zip-file-pattern }}" | sed "s/{version}/${VERSION_NUM}/g")
        echo "Output zip file name: $output_zip_file"

        # 스크립트가 GITHUB_OUTPUT을 사용하여 body_path, zip_path 설정해야 함
        python ./.github/scripts/generate_release_info.py \
          --version "$VERSION_NUM" \
          --assets-dir "${{ inputs.prepared-assets-path }}" \
          --output-zip-file "$output_zip_file"
